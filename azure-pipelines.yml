trigger: none

pool:
  vmImage: 'windows-latest'

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  MajorVersion: 1
  MinorVersion: 0
  PatchVersion: 0
  project_name: TestApp1
  org_name: iclr-build

stages:

# If building master, name = version
- stage: Master_Name
  displayName: Master Version Name
  condition: eq(variables['Build.SourceBranchName'], 'master')
  jobs:
  - job: Set_Master_Version_Number
    variables:
       brpatch: $(version)
    steps:
      - bash: |
           echo "##vso[build.updatebuildnumber]$(MajorVersion).$(MinorVersion).$(PatchVersion).$(brpatch)"
        name: SetBranchBuildName
        
# If building branch, name = branch name
- stage: Branch_Name
  displayName: Branch Version Name
  condition: ne(variables['Build.SourceBranchName'], 'master')
  jobs:
  - job: Set_Branch_Version_Name
    steps:
      - bash: |
           echo "##vso[build.updatebuildnumber]$(Build.SourceBranchName)"
        name: SetBranchBuildName

- stage:
  displayName: Build Steps
  condition: or(not(failed('Master_Name')), not(failed('Branch_Name')))
  jobs:
    - job: Build_Steps
      steps:
      
      # Download icGeneric.dll from latest icGeneric pipeline (latest build)
      - task: DownloadBuildArtifacts@0
        displayName: Download icGeneric.dll
        inputs:
          buildType: 'specific'
          project: '$(org_name)'
          pipeline: 'icGeneric'
          specificBuildWithTriggering: true
          buildVersionToDownload: 'latest'
          downloadType: 'specific'
          downloadPath: './'

      # Move icGeneric.dll to project directory
      - task: PowerShell@2
        displayName: Unzip/copy icGeneric
        inputs:
          targetType: 'inline'
          script: |
            cd icGeneric
            Expand-Archive *.zip .\            
            rm *.zip
            cp icGeneric.dll ../

      # Download icLogger.dll from latest icLogger pipeline (latest build)
      - task: DownloadBuildArtifacts@0
        displayName: Download icLogger artifact
        inputs:
          buildType: 'specific'
          project: '$(org_name)'
          pipeline: 'icLogger'
          specificBuildWithTriggering: true
          buildVersionToDownload: 'latest'
          downloadType: 'specific'
          downloadPath: './'
      
      # Move icLogger.dll to project directory
      - task: PowerShell@2
        displayName: Unzip/copy icLogger + dependencies
        inputs:
          targetType: 'inline'
          script: |
            cd icLogger
            Expand-Archive *.zip .\            
            rm *.zip
            cp icLogger.dll ../

      # NuGet Restore
      - task: NuGetCommand@2
        inputs:
          command: 'restore'
          restoreSolution: '$(project_name).sln'
          feedsToUse: 'select'      

      # Build .csproj file
      - task: VSBuild@1
        inputs:
          solution: '$(project_name).csproj'
          msbuildArgs: '/p:ReferencePath="./"'
          configuration: $(buildConfiguration)

      # Create artifact zip
      - task: PowerShell@2
        displayName: Archive Files
        inputs:
          targetType: 'inline'
          script: |
            Compress-Archive -Path "$(Build.SourcesDirectory)/bin/Release/*.exe*" -DestinationPath "$(Build.ArtifactStagingDirectory)/$(project_name)_$(Build.BuildId).zip"
        
      # Publish artifact  
      - task: PublishBuildArtifacts@1
        displayName: Publish $(project_name) artifact
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: $(project_name)

      # Create GitHub release
      - task: GitHubRelease@1
        displayName: 'Create GitHub Release'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
            gitHubConnection: 'ICLR-Github'
            repositoryName: 'inteliclear/$(project_name)'
            action: 'create'
            target: '$(Build.SourceVersion)'
            tagSource: 'userSpecifiedTag'
            tag: $(Build.BuildNumber)
            changeLogCompareToRelease: 'lastFullRelease'
            changeLogType: 'commitBased'          
